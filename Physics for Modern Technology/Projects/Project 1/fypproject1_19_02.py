# -*- coding: utf-8 -*-
"""FYPProject1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sr5Pm_6NMOwuctw32AVTR7oofd3dM7L0

**Initialization**
"""

import matplotlib.pyplot as plt
import numpy as np

"""*Arbitrary Initialization*"""

#000
a =np.sqrt(0.025)
#001
b = np.sqrt(0.075)
#010
c =np.sqrt( 0.25 )
#011
d = np.sqrt(0.05 )
#100
e =np.sqrt( 0.225)
#101
f = np.sqrt(0.15)
#110
g = np.sqrt(0.16)
#111
h =np.sqrt( 0.065)

psi = np.array([[a],[b],[c],[d],[e],[f],[g],[h]])
print(psi)

"""*Initialized in the "cat state"*"""

#000
a =np.sqrt(0.5)
#001
b = np.sqrt(0)
#010
c =np.sqrt(0)
#011
d = np.sqrt(0)
#100
e =np.sqrt( 0)
#101
f = np.sqrt(0)
#110
g = np.sqrt(0)
#111
h =np.sqrt( 0.5)

psi = np.array([[a],[b],[c],[d],[e],[f],[g],[h]])
#print(psi)

"""*Initialized in a superposition of all 8 basis states*"""

#000
a =np.sqrt(0.125)
#001
b = np.sqrt(0.125)
#010
c =np.sqrt(0.125)
#011
d = np.sqrt(0.125)
#100
e =np.sqrt(0.125)
#101
f = np.sqrt(0.125)
#110
g = np.sqrt(0.125)
#111
h =np.sqrt( 0.125)

psi = np.array([[a],[b],[c],[d],[e],[f],[g],[h]])
print(psi)

"""General Initialization"""

def initialize(A,B,C,D,E,F,G,H):
  global a, b, c, d, e, f, g, h
  #000
  a =np.sqrt(A)
  #001
  b = np.sqrt(B)
  #010
  c =np.sqrt(C)
  #011
  d = np.sqrt(D)
  #100
  e =np.sqrt(E)
  #101
  f = np.sqrt(F)
  #110
  g = np.sqrt(G)
  #111
  h =np.sqrt( H)
  #print(A,B,C,D,E,F,G,H)
  #print(a,b,c,d,e,f,g,h)
  
  

  psi = np.array([[a],[b],[c],[d],[e],[f],[g],[h]])
  #print(psi)

"""**Measurement**"""

def measurement(sampleSize):
  global aCounter
  global bCounter
  global cCounter
  global dCounter
  global eCounter
  global fCounter
  global gCounter
  global hCounter
  #global sampleSize

  aCounter = 0
  bCounter = 0
  cCounter = 0
  dCounter = 0
  eCounter = 0
  fCounter = 0
  gCounter = 0
  hCounter = 0

  #print("SAMPPLE =",sampleSize)
  #sampleSize = 1000
  global error_data
  error_data = []

  for i in range(1,sampleSize+1):
    r = np.random.uniform(0,1)
    
    q = (np.abs(a))**2
    if r < q:
      #print("000")
      aCounter += 1
      Aerror = aCounter/i
      error_data.append(Aerror)
    else:
      q = q + (np.abs(b))**2
      if r < q:
        #print("001")
        bCounter += 1
        error_data.append(0)
      else:
        q = q + (np.abs(c))**2
        if r < q:
          #print("010")
          cCounter += 1
          error_data.append(0)
        else:
          q = q + (np.abs(d))**2
          if r < q:
            #print("011")
            dCounter += 1
            error_data.append(0)
          else:
            q = q + (np.abs(e))**2
            if r < q:
              #print("100")
              eCounter += 1
              error_data.append(0)
            else:
              q = q + (np.abs(f))**2
              if r < q:
                #print("101")
                fCounter += 1
                error_data.append(0)
              else:
                q = q + (np.abs(g))**2
                if r < q:
                  #print("110")
                  gCounter += 1
                  error_data.append(0)
                else:
                  q = q + (np.abs(h))**2
                  if r < q:
                    #print("111")
                    hCounter += 1
                    error_data.append(0)
  

def printMeasuredProb():
  print(aCounter/sampleSize)
  print(bCounter/sampleSize)
  print(cCounter/sampleSize)
  print(dCounter/sampleSize)
  print(eCounter/sampleSize)
  print(fCounter/sampleSize)
  print(gCounter/sampleSize)
  print(hCounter/sampleSize)





#initialize(0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125)
#measurement(10000)
#error(200000)

def plotHist(sampleSize):

  histData = [aCounter/sampleSize, bCounter/sampleSize, cCounter/sampleSize, dCounter/sampleSize, eCounter/sampleSize, fCounter/sampleSize, gCounter/sampleSize, hCounter/sampleSize]
  objects = ('000', '001', '010', '011', '100', '101','110','100')
  y_pos = np.arange(len(histData))
  #plt.figure(figsize=(15,8))
  plt.xticks(y_pos, objects)
  plt.ylabel('Probability')
  plt.xlabel('Quantum State')
  plt.title('Quantum State Measurement Probability')
  plt.bar(y_pos, histData, align='center', alpha=0.5)

#initialize(0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125)
#measurement(1000)
#plotHist(1000)

def error_vs_sampleSize(sampleSize):
  initialize(0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125)
  measurement(sampleSize)
  x = np.linspace(0,sampleSize,sampleSize)
  plt.plot(x,error_data)

error_vs_sampleSize(5000)

def error(sampleSize):
  
  aError = (((aCounter/sampleSize)-(a*a))/(a*a))*100
  bError = (((bCounter/sampleSize)-(a*a))/(a*a))*100
  cError = (((cCounter/sampleSize)-(a*a))/(a*a))*100
  dError = (((dCounter/sampleSize)-(a*a))/(a*a))*100
  eError = (((eCounter/sampleSize)-(a*a))/(a*a))*100
  fError = (((fCounter/sampleSize)-(a*a))/(a*a))*100
  gError = (((gCounter/sampleSize)-(a*a))/(a*a))*100
  hError = (((hCounter/sampleSize)-(a*a))/(a*a))*100
  #print("SampleSize =",sampleSize)

  #return aError


  print("aError is",aError)
  print("bError is",bError)
  print("cError is",cError)
  print("dError is",dError)
  print("eError is",eError)
  print("fError is",fError)
  print("gError is",gError)
  print("hError is",hError)


  #print("a=",a)
  #print("a sqrd=",a*a)
  #print("aCounter=",aCounter/sampleSize)

def findSampleSize(sample_size):
  
    initialize(0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125)
    error_avg_array = []

    for m in range (sample_size):
        measurement(sample_size)
        error(sample_size)
        error_avg_array.append(error(sample_size))
        
    x = np.linspace(1,sample_size,sample_size)
    plt.figure(figsize=(15,10))
    ax=plt.axes()
    ax.set_facecolor('lavender')
    plt.grid(color='white')

    plt.xlabel("sample_size")
    plt.ylabel("% Error")
    plt.title("1 Sample")
    plt.plot(x,error_avg_array)
#    plt.savefig("Figure 2 - Sample size %i" % sample_size)

findSampleSize(100)

def findSampleSize_Averaged(samples, sample_size):
    initialize(0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125)
    error_avg_array = []
    for m in range (sample_size):
        avg_error = []
        for n in range(samples):
            measurement(sample_size)
            error(sample_size)
            avg_error.append(error(sample_size))
        
        error_avg = (sum(avg_error)/len(avg_error))
        error_avg_array.append(error_avg)
        
    x = np.linspace(1,sample_size,sample_size)
    plt.figure(figsize=(15,10))
    ax=plt.axes()
    ax.set_facecolor('lavender')
    plt.grid(color='white')

    plt.xlabel("sample_size")
    plt.ylabel("% Error")
    plt.title("Average of %i" % samples)
    plt.plot(x,error_avg_array)
#    plt.savefig("Figure 2 - Sample size %i" % sample_size)

findSampleSize_Averaged(100, 1000)
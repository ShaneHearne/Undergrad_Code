# -*- coding: utf-8 -*-
"""FYP Project 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qeh6DxSTS8aue3GPGe6APkivDsjkvyEw
"""

import matplotlib.pyplot as plt
import numpy as np
import sympy as sym
import cmath 
from sympy.interactive import printing
printing.init_printing()

"""**The Hadamard** **Gate**"""

#Using Kronecker product to generate multiqubit Hadamard gates

H = (1/(np.sqrt(2))) * np.array([[1,1],[1,-1]])
#H = np.array([[1,1],[1,-1]])
I = np.identity(2,int)
H_I = np.kron(H,I)
I_H = np.kron(I,H)

H_I_I = np.kron(H_I,I)

I_H_I = np.kron(I_H,I)

I_I_H = np.kron(I,I_H)


#print("H_1 = \n",H_I_I)
#print("H_2 = \n",I_H_I)
#print("H_3 = \n",I_I_H)

"""**The Phase Shift Gate**"""

#Using Kronecker product to generate multiqubit Phase shift gates

theta_sym = sym.Symbol('\u03F4')
img = sym.Symbol("i")
i = complex(0,1);
R = np.array([[1,0],[0,np.exp(i*(np.pi))]])
#R = np.array([[1,0],[0,sym.exp(img*theta_sym)]])
I = np.identity(2,int)
#print(R)

R_I = np.kron(R,I)

I_R = np.kron(I,R)

R_I_I = np.kron(R_I,I)

I_R_I = np.kron(I_R,I)

I_I_R = np.kron(I,I_R)

#print(R_I)
#print("R_1 = \n",R_I_I)
#print("R_2 = \n",I_R_I)
print("R_3 = \n",I_I_R)
#print(img)

#Latex doesnt work in Colab
#This code works in notebook, althought yet to get it working for arrays
func = sym.Function('func')
theta = sym.Symbol('o', real=True)
func = sym.exp(5)
display(func)

np.exp(i(n))

def initialize(A,B,C,D,E,F,G,H):
  global a, b, c, d, e, f, g, h
  global psi
  #000
  a =np.sqrt(A)
  #001
  b = np.sqrt(B)
  #010
  c =np.sqrt(C)
  #011
  d = np.sqrt(D)
  #100
  e =np.sqrt(E)
  #101
  f = np.sqrt(F)
  #110
  g = np.sqrt(G)
  #111
  h =np.sqrt( H)
  #print(A,B,C,D,E,F,G,H)
  #print(a,b,c,d,e,f,g,h)
  
  

  psi = np.array([[a],[b],[c],[d],[e],[f],[g],[h]])
  #print(psi)

A = np.array([[1,2,3],[1,5,5],[3,4,6]])
#print(A)
B1 = np.array([[1],[2],[3]])
B = np.transpose(B1)
#print(B)
#result = np.multiply(A,B)
result = np.multiply(A,B)
#result = np.transpose(np.matmul(A,B))
#result = (np.matmul(A,B))
print(result)
#print(result2)

def measurement(sampleSize):
  global aCounter
  global bCounter
  global cCounter
  global dCounter
  global eCounter
  global fCounter
  global gCounter
  global hCounter
  #global sampleSize

  aCounter = 0
  bCounter = 0
  cCounter = 0
  dCounter = 0
  eCounter = 0
  fCounter = 0
  gCounter = 0
  hCounter = 0

  #print("SAMPPLE =",sampleSize)
  #sampleSize = 1000
  global error_data
  error_data = []

  for i in range(1,sampleSize):
    r = np.random.uniform(0,1)
    
    q = (np.abs(a))**2
    if r < q:
      #print("000")
      aCounter += 1
      Aerror = aCounter/i
      error_data.append(Aerror)
    else:
      q = q + (np.abs(b))**2
      if r < q:
        #print("001")
        bCounter += 1
        error_data.append(0)
      else:
        q = q + (np.abs(c))**2
        if r < q:
          #print("010")
          cCounter += 1
          error_data.append(0)
        else:
          q = q + (np.abs(d))**2
          if r < q:
            #print("011")
            dCounter += 1
            error_data.append(0)
          else:
            q = q + (np.abs(e))**2
            if r < q:
              #print("100")
              eCounter += 1
              error_data.append(0)
            else:
              q = q + (np.abs(f))**2
              if r < q:
                #print("101")
                fCounter += 1
                error_data.append(0)
              else:
                q = q + (np.abs(g))**2
                if r < q:
                  #print("110")
                  gCounter += 1
                  error_data.append(0)
                else:
                  q = q + (np.abs(h))**2
                  if r < q:
                    #print("111")
                    hCounter += 1
                    error_data.append(0)

def plotHist(sampleSize):

  histData = [aCounter/sampleSize, bCounter/sampleSize, cCounter/sampleSize, dCounter/sampleSize, eCounter/sampleSize, fCounter/sampleSize, gCounter/sampleSize, hCounter/sampleSize]
  objects = ('000', '001', '010', '011', '100', '101','110','100')
  y_pos = np.arange(len(histData))
  #plt.figure(figsize=(15,8))
  plt.xticks(y_pos, objects)
  plt.ylabel('Probability')
  plt.xlabel('Quantum State')
  plt.title('Quantum State Measurement Probability')
  plt.bar(y_pos, histData, align='center', alpha=0.5)

#initialize(0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125)
#measurement(1000)
#plotHist(1000)

#Isnt working

def fig_3_a(sampleSize):
  initialize(1,0,0,0,0,0,0,0)
  psi_new =  np.matmul(I_H_I,psi)
  a = psi_new[0]
  b = psi_new[1]
  c = psi_new[2]
  d = psi_new[3]
  e = psi_new[4]
  f = psi_new[5]
  g = psi_new[6]
  h = psi_new[7]
  measurement(sampleSize)
  plotHist(sampleSize) 


#print(I_H_I)
#print(psi)
#print(psi_new)
print(a,b,c,d,e,f,g,h)

fig_3_a(1000)
print(a,b,c,d,e,f,g,h)

"""**Fig 3** **A**"""

initialize(1,0,0,0,0,0,0,0)
psi_new =  np.matmul(I_H_I,psi)
a = psi_new[0]
b = psi_new[1]
c = psi_new[2]
d = psi_new[3]
e = psi_new[4]
f = psi_new[5]
g = psi_new[6]
h = psi_new[7]
print(a,b,c,d,e,f,g,h)
measurement(1000)
plotHist(1000)

"""**Fig 3 B**"""

initialize(1,0,0,0,0,0,0,0)
psi_1 =  np.matmul(H_I_I,psi)
psi_2 =  np.matmul(I_H_I,psi_1)
psi_new =  np.matmul(I_I_H,psi_2)

print(a,b,c,d,e,f,g,h)
a = psi_new[0]
b = psi_new[1]
c = psi_new[2]
d = psi_new[3]
e = psi_new[4]
f = psi_new[5]
g = psi_new[6]
h = psi_new[7]
print(a,b,c,d,e,f,g,h)
measurement(1000)
plotHist(1000)

"""**Fig C**"""

initialize(1,0,0,0,0,0,0,0)
psi_1 =  np.matmul(I_I_H,psi)
psi_new =  np.matmul(I_I_H,psi_1)


print(a,b,c,d,e,f,g,h)
a = psi_new[0]
b = psi_new[1]
c = psi_new[2]
d = psi_new[3]
e = psi_new[4]
f = psi_new[5]
g = psi_new[6]
h = psi_new[7]
print(a,b,c,d,e,f,g,h)
measurement(1000)
plotHist(1000)

"""**Fig D**"""

initialize(1,0,0,0,0,0,0,0)
print(psi)
psi_1 =  np.matmul(I_I_H,psi)
print(psi_1)
psi_2 =  np.matmul(I_I_R,psi_1)
print(psi_2)
psi_new =  np.matmul(I_I_H,psi_2)
print(psi_new)


print(a,b,c,d,e,f,g,h)
a = psi_new[0]
b = psi_new[1]
c = psi_new[2]
d = psi_new[3]
e = psi_new[4]
f = psi_new[5]
g = psi_new[6]
h = psi_new[7]
print(a,b,c,d,e,f,g,h)
measurement(1000)
plotHist(1000)